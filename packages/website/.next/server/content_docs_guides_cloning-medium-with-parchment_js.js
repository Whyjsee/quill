"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "content_docs_guides_cloning-medium-with-parchment_js";
exports.ids = ["content_docs_guides_cloning-medium-with-parchment_js"];
exports.modules = {

/***/ "./content/docs/guides/cloning-medium-with-parchment.js":
/*!**************************************************************!*\
  !*** ./content/docs/guides/cloning-medium-with-parchment.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   basicCSS: () => (/* binding */ basicCSS),\n/* harmony export */   basicHTML: () => (/* binding */ basicHTML),\n/* harmony export */   blockquoteBlot: () => (/* binding */ blockquoteBlot),\n/* harmony export */   boldBlot: () => (/* binding */ boldBlot),\n/* harmony export */   cssWithBlockquoteAndHeader: () => (/* binding */ cssWithBlockquoteAndHeader),\n/* harmony export */   dividerBlot: () => (/* binding */ dividerBlot),\n/* harmony export */   externalResources: () => (/* binding */ externalResources),\n/* harmony export */   headerBlot: () => (/* binding */ headerBlot),\n/* harmony export */   html: () => (/* binding */ html),\n/* harmony export */   imageBlot: () => (/* binding */ imageBlot),\n/* harmony export */   italicBlot: () => (/* binding */ italicBlot),\n/* harmony export */   linkBlot: () => (/* binding */ linkBlot),\n/* harmony export */   tweetBlot: () => (/* binding */ tweetBlot),\n/* harmony export */   videoBlot: () => (/* binding */ videoBlot)\n/* harmony export */ });\nconst externalResources = [\n    \"https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css\",\n    \"https://fonts.googleapis.com/css?family=Open+Sans%3A300,400,600,700\",\n    \"https://platform.twitter.com/widgets.js\"\n];\nconst basicHTML = `\n<link href=\"/styles.css\" rel=\"stylesheet\">\n\n<div id=\"tooltip-controls\">\n  <button id=\"bold-button\"><i class=\"fa fa-bold\"></i></button>\n  <button id=\"italic-button\"><i class=\"fa fa-italic\"></i></button>\n  <button id=\"link-button\"><i class=\"fa fa-link\"></i></button>\n  <button id=\"blockquote-button\"><i class=\"fa fa-quote-right\"></i></button>\n  <button id=\"header-1-button\"><i class=\"fa fa-header\"><sub>1</sub></i></button>\n  <button id=\"header-2-button\"><i class=\"fa fa-header\"><sub>2</sub></i></button>\n</div>\n<div id=\"sidebar-controls\">\n  <button id=\"image-button\"><i class=\"fa fa-camera\"></i></button>\n  <button id=\"video-button\"><i class=\"fa fa-play\"></i></button>\n  <button id=\"tweet-button\"><i class=\"fa fa-twitter\"></i></button>\n  <button id=\"divider-button\"><i class=\"fa fa-minus\"></i></button>\n</div>\n`;\nconst html = `\n<link href=\"{{site.cdn}}/quill.core.css\" rel=\"stylesheet\" />\n<script src=\"{{site.cdn}}/quill.core.js\"></script>\n${basicHTML}\n<div id=\"editor\">Tell your story...</div>\n\n<script type=\"module\" src=\"/index.js\"></script>\n`;\nconst basicCSS = `\n#editor {\n  border: 1px solid #ccc;\n  font-family: 'Open Sans', Helvetica, sans-serif;\n  font-size: 1.2em;\n  height: 180px;\n  margin: 0 auto;\n  width: 450px;\n}\n\n#tooltip-controls, #sidebar-controls {\n  text-align: center;\n}\n\nbutton {\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  display: inline-block;\n  font-size: 18px;\n  padding: 0;\n  height: 32px;\n  width: 32px;\n  text-align: center;\n}\nbutton:active, button:focus {\n  outline: none;\n}\n`;\nconst boldBlot = `\nconst Inline = Quill.import('blots/inline');\n\nclass BoldBlot extends Inline {\n  static blotName = 'bold';\n  static tagName = 'strong';\n}\n\nQuill.register(BoldBlot);\n`;\nconst italicBlot = `\nconst Inline = Quill.import('blots/inline');\n\nclass ItalicBlot extends Inline {\n  static blotName = 'italic';\n  static tagName = 'em';\n}\n\nQuill.register(ItalicBlot);\n`;\nconst linkBlot = `\nconst Inline = Quill.import('blots/inline');\n\nclass LinkBlot extends Inline {\n  static blotName = 'link';\n  static tagName = 'a';\n\n  static create(url) {\n    let node = super.create();\n    // Sanitize url if desired\n    node.setAttribute('href', url);\n    // Okay to set other non-format related attributes\n    node.setAttribute('target', '_blank');\n    return node;\n  }\n  \n  static formats(node) {\n    // We will only be called with a node already\n    // determined to be a Link blot, so we do\n    // not need to check ourselves\n    return node.getAttribute('href');\n  }\n}\n\nQuill.register(LinkBlot);\n`;\nconst blockquoteBlot = `\nconst Block = Quill.import('blots/block');\n\nclass BlockquoteBlot extends Block {\n  static blotName = 'blockquote';\n  static tagName = 'blockquote';\n}\n\nQuill.register(BlockquoteBlot);\n`;\nconst headerBlot = `\nconst Block = Quill.import('blots/block');\n\nclass HeaderBlot extends Block {\n  static blotName = 'header';\n  static tagName = ['h1', 'h2'];\n}\n\nQuill.register(HeaderBlot);\n`;\nconst cssWithBlockquoteAndHeader = `\n${basicCSS}\n\n#editor h1 + p,\n#editor h2 + p {\n  margin-top: 0.5em; \n}\n#editor blockquote {\n  border-left: 4px solid #111;\n  padding-left: 1em;\n}\n`;\nconst dividerBlot = `\nconst BlockEmbed = Quill.import('blots/block/embed');\n\nclass DividerBlot extends BlockEmbed {\n  static blotName = 'divider';\n  static tagName = 'hr';\n}\n\nQuill.register(DividerBlot);\n`;\nconst imageBlot = `\nconst BlockEmbed = Quill.import('blots/block/embed');\n\nclass ImageBlot extends BlockEmbed {\n  static blotName = 'image';\n  static tagName = 'img';\n\n  static create(value) {\n    let node = super.create();\n    node.setAttribute('alt', value.alt);\n    node.setAttribute('src', value.url);\n    return node;\n  }\n  \n  static value(node) {\n    return {\n      alt: node.getAttribute('alt'),\n      url: node.getAttribute('src')\n    };\n  }\n}\n\nQuill.register(ImageBlot);\n`;\nconst videoBlot = `\nconst BlockEmbed = Quill.import('blots/block/embed');\n\nclass VideoBlot extends BlockEmbed {\n  static blotName = 'video';\n  static tagName = 'iframe';\n\n  static create(url) {\n    let node = super.create();\n    node.setAttribute('src', url);\n    node.setAttribute('frameborder', '0');\n    node.setAttribute('allowfullscreen', true);\n    return node;\n  }\n  \n  static formats(node) {\n    let format = {};\n    if (node.hasAttribute('height')) {\n      format.height = node.getAttribute('height');\n    }\n    if (node.hasAttribute('width')) {\n      format.width = node.getAttribute('width');\n    }\n    return format;\n  }\n  \n  static value(node) {\n    return node.getAttribute('src');\n  }\n  \n  format(name, value) {\n    if (name === 'height' || name === 'width') {\n      if (value) {\n        this.domNode.setAttribute(name, value);\n      } else {\n        this.domNode.removeAttribute(name, value);\n      }\n    } else {\n      super.format(name, value);\n    }\n  }\n}\n\nQuill.register(VideoBlot);\n`;\nconst tweetBlot = `\nconst BlockEmbed = Quill.import('blots/block/embed');\n\nclass TweetBlot extends BlockEmbed {\n  static blotName = 'tweet';\n  static tagName = 'div';\n  static className = 'tweet';\n\n  static create(id) {\n    let node = super.create();\n    node.dataset.id = id;\n    twttr.widgets.createTweet(id, node);\n    return node;\n  }\n  \n  static value(domNode) {\n    return domNode.dataset.id;\n  }\n}\n\nQuill.register(TweetBlot);\n`;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./content/docs/guides/cloning-medium-with-parchment.js\n");

/***/ })

};
;